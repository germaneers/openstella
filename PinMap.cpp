
#include "GPIO.h"
#include <stdint.h>
#include <StellarisWare/inc/hw_types.h>
#include <StellarisWare/driverlib/rom.h>
#include <StellarisWare/driverlib/gpio.h>
#include <StellarisWare/driverlib/rom_map.h>
#include <StellarisWare/driverlib/pin_map.h>

#ifdef PART_LM3S9DN6
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1811
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9DN5
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1816
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1651
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S3W26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F212H5QD
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		case 0xf1: cfg = GPIO_PP1_M0PWM1; break; // port P, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		case 0xf0: cfg = GPIO_PP0_M0PWM0; break; // port P, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		case 0xf2: cfg = GPIO_PP2_M0PWM2; break; // port P, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0xc7: cfg = GPIO_PM7_M0PWM5; break; // port M, pin 7
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0xc6: cfg = GPIO_PM6_M0PWM4; break; // port M, pin 6
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		case 0xd3: cfg = GPIO_PN3_M0PWM7; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		case 0xd2: cfg = GPIO_PN2_M0PWM6; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0xa7: cfg = GPIO_PK7_M0FAULT3; break; // port K, pin 7
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_M1PWM4; break; // port N, pin 4
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_M1PWM6; break; // port N, pin 6
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_M1PWM7; break; // port N, pin 7
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0xa5: cfg = GPIO_PK5_M0FAULT1; break; // port K, pin 5
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0xa4: cfg = GPIO_PK4_M0FAULT0; break; // port K, pin 4
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0xa6: cfg = GPIO_PK6_M0FAULT2; break; // port K, pin 6
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_M1PWM5; break; // port N, pin 5
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F212H5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1B21
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4FS1AH5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPECI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_PECI0TX; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SERIRQ() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc4: cfg = GPIO_PM4_LPC0SERIRQ; break; // port M, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc5: cfg = GPIO_PM5_LPC0CLK; break; // port M, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_FAN0PWM1; break; // port K, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc6: cfg = GPIO_PM6_FAN0PWM0; break; // port M, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_FAN0PWM3; break; // port N, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd2: cfg = GPIO_PN2_FAN0PWM2; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAN0PWM5; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_FAN0PWM4; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb2: cfg = GPIO_PL2_LPC0AD1; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb3: cfg = GPIO_PL3_LPC0AD0; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_LPC0AD3; break; // port L, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_LPC0AD2; break; // port L, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd3: cfg = GPIO_PN3_FAN0TACH2; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_FAN0TACH3; break; // port N, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc7: cfg = GPIO_PM7_FAN0TACH0; break; // port M, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa7: cfg = GPIO_PK7_FAN0TACH1; break; // port K, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_FAN0TACH4; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_FAN0TACH5; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F210C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9D96
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5P51
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F131E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5P56
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9D90
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9U92
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9U90
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F131H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9U96
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9C97
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9D92
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4FS1GH5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPECI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_PECI0TX; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SERIRQ() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc4: cfg = GPIO_PM4_LPC0SERIRQ; break; // port M, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc5: cfg = GPIO_PM5_LPC0CLK; break; // port M, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_FAN0PWM1; break; // port K, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc6: cfg = GPIO_PM6_FAN0PWM0; break; // port M, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_FAN0PWM3; break; // port N, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd2: cfg = GPIO_PN2_FAN0PWM2; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAN0PWM5; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_FAN0PWM4; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb2: cfg = GPIO_PL2_LPC0AD1; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb3: cfg = GPIO_PL3_LPC0AD0; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_LPC0AD3; break; // port L, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_LPC0AD2; break; // port L, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd3: cfg = GPIO_PN3_FAN0TACH2; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_FAN0TACH3; break; // port N, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc7: cfg = GPIO_PM7_FAN0TACH0; break; // port M, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa7: cfg = GPIO_PK7_FAN0TACH1; break; // port K, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_FAN0TACH4; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_FAN0TACH5; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F122H5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F132H5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S2U93
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F132H5QD
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F132C4QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1621
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F232H5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		case 0xf1: cfg = GPIO_PP1_M0PWM1; break; // port P, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		case 0xf0: cfg = GPIO_PP0_M0PWM0; break; // port P, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		case 0xf3: cfg = GPIO_PP3_M0PWM3; break; // port P, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		case 0xf2: cfg = GPIO_PP2_M0PWM2; break; // port P, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0xc7: cfg = GPIO_PM7_M0PWM5; break; // port M, pin 7
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		case 0xf5: cfg = GPIO_PP5_M0PWM5; break; // port P, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0xc6: cfg = GPIO_PM6_M0PWM4; break; // port M, pin 6
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		case 0xf4: cfg = GPIO_PP4_M0PWM4; break; // port P, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0xd3: cfg = GPIO_PN3_M0PWM7; break; // port N, pin 3
		case 0xf7: cfg = GPIO_PP7_M0PWM7; break; // port P, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0xd2: cfg = GPIO_PN2_M0PWM6; break; // port N, pin 2
		case 0xf6: cfg = GPIO_PP6_M0PWM6; break; // port P, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0xa7: cfg = GPIO_PK7_M0FAULT3; break; // port K, pin 7
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_M1PWM4; break; // port Q, pin 4
		case 0xd4: cfg = GPIO_PN4_M1PWM4; break; // port N, pin 4
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_M1PWM6; break; // port Q, pin 6
		case 0xd6: cfg = GPIO_PN6_M1PWM6; break; // port N, pin 6
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_M1PWM7; break; // port Q, pin 7
		case 0xd7: cfg = GPIO_PN7_M1PWM7; break; // port N, pin 7
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_M1PWM0; break; // port Q, pin 0
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_M1PWM1; break; // port Q, pin 1
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x102: cfg = GPIO_PQ2_M1PWM2; break; // port Q, pin 2
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x103: cfg = GPIO_PQ3_M1PWM3; break; // port Q, pin 3
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0xa5: cfg = GPIO_PK5_M0FAULT1; break; // port K, pin 5
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0xa4: cfg = GPIO_PK4_M0FAULT0; break; // port K, pin 4
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0xa6: cfg = GPIO_PK6_M0FAULT2; break; // port K, pin 6
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_M1PWM5; break; // port Q, pin 5
		case 0xd5: cfg = GPIO_PN5_M1PWM5; break; // port N, pin 5
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5T36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9L97
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F212H5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		case 0xf1: cfg = GPIO_PP1_M0PWM1; break; // port P, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		case 0xf0: cfg = GPIO_PP0_M0PWM0; break; // port P, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		case 0xf3: cfg = GPIO_PP3_M0PWM3; break; // port P, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		case 0xf2: cfg = GPIO_PP2_M0PWM2; break; // port P, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0xc7: cfg = GPIO_PM7_M0PWM5; break; // port M, pin 7
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		case 0xf5: cfg = GPIO_PP5_M0PWM5; break; // port P, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0xc6: cfg = GPIO_PM6_M0PWM4; break; // port M, pin 6
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		case 0xf4: cfg = GPIO_PP4_M0PWM4; break; // port P, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0xd3: cfg = GPIO_PN3_M0PWM7; break; // port N, pin 3
		case 0xf7: cfg = GPIO_PP7_M0PWM7; break; // port P, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0xd2: cfg = GPIO_PN2_M0PWM6; break; // port N, pin 2
		case 0xf6: cfg = GPIO_PP6_M0PWM6; break; // port P, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0xa7: cfg = GPIO_PK7_M0FAULT3; break; // port K, pin 7
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_M1PWM4; break; // port Q, pin 4
		case 0xd4: cfg = GPIO_PN4_M1PWM4; break; // port N, pin 4
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_M1PWM6; break; // port Q, pin 6
		case 0xd6: cfg = GPIO_PN6_M1PWM6; break; // port N, pin 6
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_M1PWM7; break; // port Q, pin 7
		case 0xd7: cfg = GPIO_PN7_M1PWM7; break; // port N, pin 7
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_M1PWM0; break; // port Q, pin 0
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_M1PWM1; break; // port Q, pin 1
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x102: cfg = GPIO_PQ2_M1PWM2; break; // port Q, pin 2
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x103: cfg = GPIO_PQ3_M1PWM3; break; // port Q, pin 3
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0xa5: cfg = GPIO_PK5_M0FAULT1; break; // port K, pin 5
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0xa4: cfg = GPIO_PK4_M0FAULT0; break; // port K, pin 4
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0xa6: cfg = GPIO_PK6_M0FAULT2; break; // port K, pin 6
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_M1PWM5; break; // port Q, pin 5
		case 0xd5: cfg = GPIO_PN5_M1PWM5; break; // port N, pin 5
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S3J26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S8C62
void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4FSXAH5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPECI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_PECI0TX; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SERIRQ() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc4: cfg = GPIO_PM4_LPC0SERIRQ; break; // port M, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc5: cfg = GPIO_PM5_LPC0CLK; break; // port M, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_FAN0PWM1; break; // port K, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc6: cfg = GPIO_PM6_FAN0PWM0; break; // port M, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_FAN0PWM3; break; // port N, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd2: cfg = GPIO_PN2_FAN0PWM2; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAN0PWM5; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_FAN0PWM4; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb2: cfg = GPIO_PL2_LPC0AD1; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb3: cfg = GPIO_PL3_LPC0AD0; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_LPC0AD3; break; // port L, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_LPC0AD2; break; // port L, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd3: cfg = GPIO_PN3_FAN0TACH2; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_FAN0TACH3; break; // port N, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc7: cfg = GPIO_PM7_FAN0TACH0; break; // port M, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa7: cfg = GPIO_PK7_FAN0TACH1; break; // port K, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_FAN0TACH4; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_FAN0TACH5; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1D21
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1D26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F130H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9GN5
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1F11
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F210H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F120C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1F16
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F111B2QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5D91
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F111H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4FSXLH5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPECI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_PECI0TX; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SERIRQ() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc4: cfg = GPIO_PM4_LPC0SERIRQ; break; // port M, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc5: cfg = GPIO_PM5_LPC0CLK; break; // port M, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_FAN0PWM1; break; // port K, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc6: cfg = GPIO_PM6_FAN0PWM0; break; // port M, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_FAN0PWM3; break; // port N, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd2: cfg = GPIO_PN2_FAN0PWM2; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAN0PWM5; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_FAN0PWM4; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb2: cfg = GPIO_PL2_LPC0AD1; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb3: cfg = GPIO_PL3_LPC0AD0; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_LPC0AD3; break; // port L, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_LPC0AD2; break; // port L, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd3: cfg = GPIO_PN3_FAN0TACH2; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_FAN0TACH3; break; // port N, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc7: cfg = GPIO_PM7_FAN0TACH0; break; // port M, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa7: cfg = GPIO_PK7_FAN0TACH1; break; // port K, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_FAN0TACH4; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_FAN0TACH5; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F110B2QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F231E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1N11
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1N16
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F110H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F122E5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5Y36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S3N26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F230E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F211B2QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9U81
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_CAN2TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_CAN2RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F112H5QD
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1G21
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F120E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9997
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F210B2QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F211H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9B81
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_CAN2TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_CAN2RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S2D93
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F131C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S3Z26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F212E5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4FS99H5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_LPC0AD2; break; // port L, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		case 0xf1: cfg = GPIO_PP1_M0PWM1; break; // port P, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		case 0xf0: cfg = GPIO_PP0_M0PWM0; break; // port P, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		case 0xf3: cfg = GPIO_PP3_M0PWM3; break; // port P, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		case 0xf2: cfg = GPIO_PP2_M0PWM2; break; // port P, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0xc7: cfg = GPIO_PM7_M0PWM5; break; // port M, pin 7
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		case 0xf5: cfg = GPIO_PP5_M0PWM5; break; // port P, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0xc6: cfg = GPIO_PM6_M0PWM4; break; // port M, pin 6
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		case 0xf4: cfg = GPIO_PP4_M0PWM4; break; // port P, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0xd3: cfg = GPIO_PN3_M0PWM7; break; // port N, pin 3
		case 0xf7: cfg = GPIO_PP7_M0PWM7; break; // port P, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0xd2: cfg = GPIO_PN2_M0PWM6; break; // port N, pin 2
		case 0xf6: cfg = GPIO_PP6_M0PWM6; break; // port P, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_FAN0PWM6; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPECI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_PECI0TX; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0xa7: cfg = GPIO_PK7_M0FAULT3; break; // port K, pin 7
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SERIRQ() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc4: cfg = GPIO_PM4_LPC0SERIRQ; break; // port M, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_M1PWM4; break; // port Q, pin 4
		case 0xd4: cfg = GPIO_PN4_M1PWM4; break; // port N, pin 4
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_M1PWM6; break; // port Q, pin 6
		case 0xd6: cfg = GPIO_PN6_M1PWM6; break; // port N, pin 6
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_M1PWM7; break; // port Q, pin 7
		case 0xd7: cfg = GPIO_PN7_M1PWM7; break; // port N, pin 7
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_M1PWM0; break; // port Q, pin 0
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_M1PWM1; break; // port Q, pin 1
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x102: cfg = GPIO_PQ2_M1PWM2; break; // port Q, pin 2
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x103: cfg = GPIO_PQ3_M1PWM3; break; // port Q, pin 3
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0xa5: cfg = GPIO_PK5_M0FAULT1; break; // port K, pin 5
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0xa4: cfg = GPIO_PK4_M0FAULT0; break; // port K, pin 4
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc5: cfg = GPIO_PM5_LPC0CLK; break; // port M, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_FAN0PWM1; break; // port K, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc6: cfg = GPIO_PM6_FAN0PWM0; break; // port M, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_FAN0PWM3; break; // port N, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd2: cfg = GPIO_PN2_FAN0PWM2; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAN0PWM5; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_FAN0PWM7; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb2: cfg = GPIO_PL2_LPC0AD1; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb3: cfg = GPIO_PL3_LPC0AD0; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_LPC0AD3; break; // port L, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_FAN0PWM4; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_FAN0TACH3; break; // port N, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa7: cfg = GPIO_PK7_FAN0TACH1; break; // port K, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0xa6: cfg = GPIO_PK6_M0FAULT2; break; // port K, pin 6
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd3: cfg = GPIO_PN3_FAN0TACH2; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_M1PWM5; break; // port Q, pin 5
		case 0xd5: cfg = GPIO_PN5_M1PWM5; break; // port N, pin 5
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc7: cfg = GPIO_PM7_FAN0TACH0; break; // port M, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_FAN0TACH5; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_FAN0TACH6; break; // port K, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_FAN0TACH7; break; // port J, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_FAN0TACH4; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1J16
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1J11
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F130C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1W16
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F112E5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S3826
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1C21
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F112C4QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9D95
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5U91
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1G58
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1R26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1R21
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9B95
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9B96
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9B90
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9B92
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5C31
void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5C36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F231H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F212C4QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F121C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F232E5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F121H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F110E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5791
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F121E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1C58
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F211C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5G36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F210E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F130E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5G31
void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F232H5QD
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		case 0xf1: cfg = GPIO_PP1_M0PWM1; break; // port P, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		case 0xf0: cfg = GPIO_PP0_M0PWM0; break; // port P, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		case 0xf2: cfg = GPIO_PP2_M0PWM2; break; // port P, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0xc7: cfg = GPIO_PM7_M0PWM5; break; // port M, pin 7
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0xc6: cfg = GPIO_PM6_M0PWM4; break; // port M, pin 6
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		case 0xd3: cfg = GPIO_PN3_M0PWM7; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		case 0xd2: cfg = GPIO_PN2_M0PWM6; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0xa7: cfg = GPIO_PK7_M0FAULT3; break; // port K, pin 7
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_M1PWM4; break; // port N, pin 4
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_M1PWM6; break; // port N, pin 6
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_M1PWM7; break; // port N, pin 7
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0xa5: cfg = GPIO_PK5_M0FAULT1; break; // port K, pin 5
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0xa4: cfg = GPIO_PK4_M0FAULT0; break; // port K, pin 4
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0xa6: cfg = GPIO_PK6_M0FAULT2; break; // port K, pin 6
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_M1PWM5; break; // port N, pin 5
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9U95
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F120B2QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F232H5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0PWM1; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0PWM0; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0PWM3; break; // port H, pin 3
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0PWM2; break; // port H, pin 2
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_M0PWM5; break; // port H, pin 5
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_M0PWM4; break; // port H, pin 4
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_M0PWM7; break; // port H, pin 7
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_M0PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_M0PWM6; break; // port H, pin 6
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		case 0x66: cfg = GPIO_PG6_M0PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		case 0x47: cfg = GPIO_PE7_CAN1TX; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_IDX1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_IDX0; break; // port H, pin 1
		case 0x92: cfg = GPIO_PJ2_IDX0; break; // port J, pin 2
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_M0FAULT3; break; // port H, pin 3
		case 0x55: cfg = GPIO_PF5_M0FAULT3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_M0FAULT1; break; // port H, pin 1
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_M0FAULT0; break; // port H, pin 0
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_PHA0; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_PHB0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_M0FAULT2; break; // port H, pin 2
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa2: cfg = GPIO_PK2_M1FAULT2; break; // port K, pin 2
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa3: cfg = GPIO_PK3_M1FAULT3; break; // port K, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa0: cfg = GPIO_PK0_M1FAULT0; break; // port K, pin 0
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_M1FAULT0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa1: cfg = GPIO_PK1_M1FAULT1; break; // port K, pin 1
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		case 0x46: cfg = GPIO_PE6_CAN1RX; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5956
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S3654
void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9971
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F132E5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		case 0x65: cfg = GPIO_PG5_USB0PFLT; break; // port G, pin 5
		case 0x55: cfg = GPIO_PF5_USB0PFLT; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x64: cfg = GPIO_PG4_USB0EPEN; break; // port G, pin 4
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5951
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F230H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x33: cfg = GPIO_PD3_USB0PFLT; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_USB0EPEN; break; // port C, pin 6
		case 0x32: cfg = GPIO_PD2_USB0EPEN; break; // port D, pin 2
		case 0x54: cfg = GPIO_PF4_USB0EPEN; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F120H5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9CN5
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5651
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5K31
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5K36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5656
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S2793
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F110C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S6G65
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S6C65
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5R31
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5R36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5P36
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5P31
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5C51
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4FS1GE5BB
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x107: cfg = GPIO_PQ7_WT5CCP1; break; // port Q, pin 7
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x106: cfg = GPIO_PQ6_WT5CCP0; break; // port Q, pin 6
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x104: cfg = GPIO_PQ4_WT4CCP0; break; // port Q, pin 4
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x105: cfg = GPIO_PQ5_WT4CCP1; break; // port Q, pin 5
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf4: cfg = GPIO_PP4_WT0CCP0; break; // port P, pin 4
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPECI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_PECI0TX; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SERIRQ() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc4: cfg = GPIO_PM4_LPC0SERIRQ; break; // port M, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc5: cfg = GPIO_PM5_LPC0CLK; break; // port M, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x103: cfg = GPIO_PQ3_WT3CCP1; break; // port Q, pin 3
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x102: cfg = GPIO_PQ2_WT3CCP0; break; // port Q, pin 2
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf7: cfg = GPIO_PP7_WT1CCP1; break; // port P, pin 7
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf6: cfg = GPIO_PP6_WT1CCP0; break; // port P, pin 6
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf3: cfg = GPIO_PP3_T5CCP1; break; // port P, pin 3
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_FAN0PWM1; break; // port K, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc6: cfg = GPIO_PM6_FAN0PWM0; break; // port M, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd4: cfg = GPIO_PN4_FAN0PWM3; break; // port N, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd2: cfg = GPIO_PN2_FAN0PWM2; break; // port N, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAN0PWM5; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x100: cfg = GPIO_PQ0_WT2CCP0; break; // port Q, pin 0
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x101: cfg = GPIO_PQ1_WT2CCP1; break; // port Q, pin 1
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd6: cfg = GPIO_PN6_FAN0PWM4; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf5: cfg = GPIO_PP5_WT0CCP1; break; // port P, pin 5
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb2: cfg = GPIO_PL2_LPC0AD1; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb3: cfg = GPIO_PL3_LPC0AD0; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_LPC0AD3; break; // port L, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0AD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_LPC0AD2; break; // port L, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd3: cfg = GPIO_PN3_FAN0TACH2; break; // port N, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd5: cfg = GPIO_PN5_FAN0TACH3; break; // port N, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc7: cfg = GPIO_PM7_FAN0TACH0; break; // port M, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa7: cfg = GPIO_PK7_FAN0TACH1; break; // port K, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd7: cfg = GPIO_PN7_FAN0TACH4; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAN0TACH5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_FAN0TACH5; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5C56
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S6G11
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5B91
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F122H5QD
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U6TX; break; // port J, pin 5
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_U7TX; break; // port K, pin 5
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa6: cfg = GPIO_PK6_C2O; break; // port K, pin 6
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_T3CCP1; break; // port J, pin 5
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0xb7: cfg = GPIO_PL7_T3CCP1; break; // port L, pin 7
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_T3CCP0; break; // port J, pin 4
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0xb6: cfg = GPIO_PL6_T3CCP0; break; // port L, pin 6
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0xc3: cfg = GPIO_PM3_WT5CCP1; break; // port M, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0xc2: cfg = GPIO_PM2_WT5CCP0; break; // port M, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_U6RX; break; // port J, pin 4
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0xc0: cfg = GPIO_PM0_WT4CCP0; break; // port M, pin 0
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		case 0xd6: cfg = GPIO_PN6_WT4CCP0; break; // port N, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0xc1: cfg = GPIO_PM1_WT4CCP1; break; // port M, pin 1
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		case 0xd7: cfg = GPIO_PN7_WT4CCP1; break; // port N, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb0: cfg = GPIO_PL0_T0CCP0; break; // port L, pin 0
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0xc6: cfg = GPIO_PM6_WT0CCP0; break; // port M, pin 6
		case 0xb0: cfg = GPIO_PL0_WT0CCP0; break; // port L, pin 0
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf0: cfg = GPIO_PP0_T4CCP0; break; // port P, pin 0
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0xc0: cfg = GPIO_PM0_T4CCP0; break; // port M, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf1: cfg = GPIO_PP1_T4CCP1; break; // port P, pin 1
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0xc1: cfg = GPIO_PM1_T4CCP1; break; // port M, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0RESET_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb5: cfg = GPIO_PL5_LPC0RESET_N; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc1: cfg = GPIO_PM1_LPC0SCI_N; break; // port M, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0xb3: cfg = GPIO_PL3_T1CCP1; break; // port L, pin 3
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0xb2: cfg = GPIO_PL2_T1CCP0; break; // port L, pin 2
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_U5TX; break; // port J, pin 3
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0xd5: cfg = GPIO_PN5_WT3CCP1; break; // port N, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		case 0xb7: cfg = GPIO_PL7_WT3CCP1; break; // port L, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0xd4: cfg = GPIO_PN4_WT3CCP0; break; // port N, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		case 0xb6: cfg = GPIO_PL6_WT3CCP0; break; // port L, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc2: cfg = GPIO_PM2_LPC0CLKRUN_N; break; // port M, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRTCCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_RTCCLK; break; // port K, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd1: cfg = GPIO_PN1_CAN0TX; break; // port N, pin 1
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0xa7: cfg = GPIO_PK7_WT1CCP1; break; // port K, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		case 0xb3: cfg = GPIO_PL3_WT1CCP1; break; // port L, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0xa6: cfg = GPIO_PK6_WT1CCP0; break; // port K, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		case 0xb2: cfg = GPIO_PL2_WT1CCP0; break; // port L, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0FRAME_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb4: cfg = GPIO_PL4_LPC0FRAME_N; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_U7RX; break; // port K, pin 4
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xc0: cfg = GPIO_PM0_LPC0PD_N; break; // port M, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0xb4: cfg = GPIO_PL4_T2CCP0; break; // port L, pin 4
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_T2CCP1; break; // port J, pin 3
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0xb5: cfg = GPIO_PL5_T2CCP1; break; // port L, pin 5
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0xc3: cfg = GPIO_PM3_T5CCP1; break; // port M, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xf2: cfg = GPIO_PP2_T5CCP0; break; // port P, pin 2
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0xc2: cfg = GPIO_PM2_T5CCP0; break; // port M, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa4: cfg = GPIO_PK4_C0O; break; // port K, pin 4
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0xd2: cfg = GPIO_PN2_WT2CCP0; break; // port N, pin 2
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		case 0xb4: cfg = GPIO_PL4_WT2CCP0; break; // port L, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0xd3: cfg = GPIO_PN3_WT2CCP1; break; // port N, pin 3
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		case 0xb5: cfg = GPIO_PL5_WT2CCP1; break; // port L, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xb1: cfg = GPIO_PL1_T0CCP1; break; // port L, pin 1
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xd0: cfg = GPIO_PN0_CAN0RX; break; // port N, pin 0
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0xc7: cfg = GPIO_PM7_WT0CCP1; break; // port M, pin 7
		case 0xb1: cfg = GPIO_PL1_WT0CCP1; break; // port L, pin 1
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0xa5: cfg = GPIO_PK5_C1O; break; // port K, pin 5
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5G56
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9790
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5G51
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9792
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F112H5QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F121B2QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9G97
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1P51
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9L71
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9BN2
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S8G62
void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9BN5
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9BN6
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXDV() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_RXDV; break; // port A, pin 5
		case 0x76: cfg = GPIO_PH6_RXDV; break; // port H, pin 6
		case 0x30: cfg = GPIO_PD0_RXDV; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x56: cfg = GPIO_PF6_RXD2; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_RXD3; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_RXD0; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_RXD0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_RXD1; break; // port B, pin 7
		case 0x57: cfg = GPIO_PF7_RXD1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCRS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_CRS; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_TXCK; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_TXD0; break; // port A, pin 4
		case 0x75: cfg = GPIO_PH5_TXD0; break; // port H, pin 5
		case 0x37: cfg = GPIO_PD7_TXD0; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_TXD1; break; // port A, pin 3
		case 0x74: cfg = GPIO_PH4_TXD1; break; // port H, pin 4
		case 0x36: cfg = GPIO_PD6_TXD1; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_TXD2; break; // port A, pin 2
		case 0x73: cfg = GPIO_PH3_TXD2; break; // port H, pin 3
		case 0x35: cfg = GPIO_PD5_TXD2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_TXD3; break; // port H, pin 2
		case 0x24: cfg = GPIO_PC4_TXD3; break; // port C, pin 4
		case 0x34: cfg = GPIO_PD4_TXD3; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_RXER; break; // port A, pin 7
		case 0x90: cfg = GPIO_PJ0_RXER; break; // port J, pin 0
		case 0x51: cfg = GPIO_PF1_RXER; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCOL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_COL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDC() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_MDC; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsMDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_MDIO; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsRXCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_RXCK; break; // port A, pin 6
		case 0x77: cfg = GPIO_PH7_RXCK; break; // port H, pin 7
		case 0x50: cfg = GPIO_PF0_RXCK; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXER() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_TXER; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_TXER; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTXEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x65: cfg = GPIO_PG5_TXEN; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHYINT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_PHYINT; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1Z16
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F122C4QC
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_U1DTR; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x47: cfg = GPIO_PE7_U1RI; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_C2O; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		case 0x57: cfg = GPIO_PF7_I2C2SDA; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		case 0x57: cfg = GPIO_PF7_T3CCP1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		case 0x56: cfg = GPIO_PF6_T3CCP0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_WT5CCP1; break; // port H, pin 3
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_WT5CCP0; break; // port H, pin 2
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_SSI3FSS; break; // port H, pin 1
		case 0xa1: cfg = GPIO_PK1_SSI3FSS; break; // port K, pin 1
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_WT4CCP0; break; // port H, pin 6
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_WT4CCP1; break; // port H, pin 7
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_U1DCD; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_SSI3TX; break; // port H, pin 3
		case 0xa3: cfg = GPIO_PK3_SSI3TX; break; // port K, pin 3
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_SSI3CLK; break; // port H, pin 0
		case 0xa0: cfg = GPIO_PK0_SSI3CLK; break; // port K, pin 0
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0SCI_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_LPC0SCI_N; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_T1CCP1; break; // port J, pin 1
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_T1CCP0; break; // port J, pin 0
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		case 0x56: cfg = GPIO_PF6_I2C2SCL; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		case 0x90: cfg = GPIO_PJ0_U4RX; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI2CLK; break; // port H, pin 4
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI2RX; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_WT3CCP1; break; // port H, pin 5
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_WT3CCP0; break; // port H, pin 4
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0CLKRUN_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_LPC0CLKRUN_N; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_U1DSR; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		case 0x67: cfg = GPIO_PG7_WT1CCP1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		case 0x66: cfg = GPIO_PG6_WT1CCP0; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_SSI3RX; break; // port H, pin 2
		case 0xa2: cfg = GPIO_PK2_SSI3RX; break; // port K, pin 2
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		case 0x91: cfg = GPIO_PJ1_U4TX; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLPC0PD_N() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_LPC0PD_N; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_T2CCP0; break; // port J, pin 2
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		case 0x55: cfg = GPIO_PF5_T2CCP1; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_I2C5SDA; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_U5RX; break; // port J, pin 2
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_WT2CCP0; break; // port H, pin 0
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_WT2CCP1; break; // port H, pin 1
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI2FSS; break; // port H, pin 5
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_TRD3; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x66: cfg = GPIO_PG6_I2C5SCL; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI2TX; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S6C11
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S2B93
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		case 0x56: cfg = GPIO_PF6_C2O; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_PWM6; break; // port A, pin 4
		case 0x24: cfg = GPIO_PC4_PWM6; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_PWM6; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_PWM6; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_PWM7; break; // port A, pin 5
		case 0x26: cfg = GPIO_PC6_PWM7; break; // port C, pin 6
		case 0x65: cfg = GPIO_PG5_PWM7; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_PWM7; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F111E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5D56
void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9D81
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_CAN2TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_CAN2RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5D51
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S5P3B
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		case 0x65: cfg = GPIO_PG5_I2S0RXSCK; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		case 0x63: cfg = GPIO_PG3_I2S0RXMCLK; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_PHB0; break; // port H, pin 3
		case 0x26: cfg = GPIO_PC6_PHB0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_PHB0; break; // port C, pin 7
		case 0x43: cfg = GPIO_PE3_PHB0; break; // port E, pin 3
		case 0x50: cfg = GPIO_PF0_PHB0; break; // port F, pin 0
		case 0x57: cfg = GPIO_PF7_PHB0; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_PHB1; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHB1; break; // port D, pin 1
		case 0x67: cfg = GPIO_PG7_PHB1; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_FAULT2; break; // port H, pin 5
		case 0x25: cfg = GPIO_PC5_FAULT2; break; // port C, pin 5
		case 0x63: cfg = GPIO_PG3_FAULT2; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_PWM4; break; // port A, pin 2
		case 0x06: cfg = GPIO_PA6_PWM4; break; // port A, pin 6
		case 0x70: cfg = GPIO_PH0_PWM4; break; // port H, pin 0
		case 0x76: cfg = GPIO_PH6_PWM4; break; // port H, pin 6
		case 0x40: cfg = GPIO_PE0_PWM4; break; // port E, pin 0
		case 0x46: cfg = GPIO_PE6_PWM4; break; // port E, pin 6
		case 0x60: cfg = GPIO_PG0_PWM4; break; // port G, pin 0
		case 0x52: cfg = GPIO_PF2_PWM4; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_FAULT0; break; // port B, pin 3
		case 0x41: cfg = GPIO_PE1_FAULT0; break; // port E, pin 1
		case 0x44: cfg = GPIO_PE4_FAULT0; break; // port E, pin 4
		case 0x36: cfg = GPIO_PD6_FAULT0; break; // port D, pin 6
		case 0x62: cfg = GPIO_PG2_FAULT0; break; // port G, pin 2
		case 0x63: cfg = GPIO_PG3_FAULT0; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_FAULT0; break; // port F, pin 4
		case 0x73: cfg = GPIO_PH3_FAULT0; break; // port H, pin 3
		case 0x92: cfg = GPIO_PJ2_FAULT0; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_I2S0TXMCLK; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_PHA1; break; // port E, pin 3
		case 0x66: cfg = GPIO_PG6_PHA1; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		case 0x62: cfg = GPIO_PG2_I2S0RXSD; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		case 0x66: cfg = GPIO_PG6_I2S0RXWS; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_PWM5; break; // port A, pin 3
		case 0x07: cfg = GPIO_PA7_PWM5; break; // port A, pin 7
		case 0x71: cfg = GPIO_PH1_PWM5; break; // port H, pin 1
		case 0x77: cfg = GPIO_PH7_PWM5; break; // port H, pin 7
		case 0x41: cfg = GPIO_PE1_PWM5; break; // port E, pin 1
		case 0x47: cfg = GPIO_PE7_PWM5; break; // port E, pin 7
		case 0x61: cfg = GPIO_PG1_PWM5; break; // port G, pin 1
		case 0x53: cfg = GPIO_PF3_PWM5; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_PHA0; break; // port C, pin 4
		case 0x42: cfg = GPIO_PE2_PHA0; break; // port E, pin 2
		case 0x31: cfg = GPIO_PD1_PHA0; break; // port D, pin 1
		case 0x56: cfg = GPIO_PF6_PHA0; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_PWM0; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_PWM0; break; // port J, pin 0
		case 0x30: cfg = GPIO_PD0_PWM0; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_PWM0; break; // port G, pin 0
		case 0x62: cfg = GPIO_PG2_PWM0; break; // port G, pin 2
		case 0x50: cfg = GPIO_PF0_PWM0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_PWM1; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_PWM1; break; // port J, pin 1
		case 0x31: cfg = GPIO_PD1_PWM1; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_PWM1; break; // port G, pin 1
		case 0x63: cfg = GPIO_PG3_PWM1; break; // port G, pin 3
		case 0x51: cfg = GPIO_PF1_PWM1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_PWM2; break; // port H, pin 0
		case 0x10: cfg = GPIO_PB0_PWM2; break; // port B, pin 0
		case 0x32: cfg = GPIO_PD2_PWM2; break; // port D, pin 2
		case 0x52: cfg = GPIO_PF2_PWM2; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_PWM3; break; // port H, pin 1
		case 0x11: cfg = GPIO_PB1_PWM3; break; // port B, pin 1
		case 0x33: cfg = GPIO_PD3_PWM3; break; // port D, pin 3
		case 0x53: cfg = GPIO_PF3_PWM3; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_FAULT3; break; // port H, pin 2
		case 0x13: cfg = GPIO_PB3_FAULT3; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsFAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_FAULT1; break; // port B, pin 6
		case 0x64: cfg = GPIO_PG4_FAULT1; break; // port G, pin 4
		case 0x65: cfg = GPIO_PG5_FAULT1; break; // port G, pin 5
		case 0x66: cfg = GPIO_PG6_FAULT1; break; // port G, pin 6
		case 0x57: cfg = GPIO_PF7_FAULT1; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_IDX1; break; // port H, pin 2
		case 0x62: cfg = GPIO_PG2_IDX1; break; // port G, pin 2
		case 0x51: cfg = GPIO_PF1_IDX1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_IDX0; break; // port B, pin 2
		case 0x14: cfg = GPIO_PB4_IDX0; break; // port B, pin 4
		case 0x16: cfg = GPIO_PB6_IDX0; break; // port B, pin 6
		case 0x30: cfg = GPIO_PD0_IDX0; break; // port D, pin 0
		case 0x37: cfg = GPIO_PD7_IDX0; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_IDX0; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1H11
void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		case 0x57: cfg = GPIO_PF7_EPI0S12; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U1DTR; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x64: cfg = GPIO_PG4_EPI0S15; break; // port G, pin 4
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		case 0x57: cfg = GPIO_PF7_CCP4; break; // port F, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x56: cfg = GPIO_PF6_CCP1; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x65: cfg = GPIO_PG5_CCP5; break; // port G, pin 5
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_U1RI; break; // port G, pin 4
		case 0x66: cfg = GPIO_PG6_U1RI; break; // port G, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x64: cfg = GPIO_PG4_CCP3; break; // port G, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		case 0x56: cfg = GPIO_PF6_U1RTS; break; // port F, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F211E5QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_M0PWM1; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_M0PWM0; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_M0PWM3; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_M0PWM2; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_M0PWM5; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M0PWM5; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_M0PWM4; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M0PWM4; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_M0PWM7; break; // port C, pin 5
		case 0x31: cfg = GPIO_PD1_M0PWM7; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_M0PWM6; break; // port C, pin 4
		case 0x30: cfg = GPIO_PD0_M0PWM6; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_CAN1TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_IDX1; break; // port C, pin 4
		case 0x65: cfg = GPIO_PG5_IDX1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsIDX0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_IDX0; break; // port D, pin 3
		case 0x54: cfg = GPIO_PF4_IDX0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_M1PWM4; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_M1PWM6; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_M1PWM7; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_M1PWM0; break; // port D, pin 0
		case 0x62: cfg = GPIO_PG2_M1PWM0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_M1PWM1; break; // port D, pin 1
		case 0x63: cfg = GPIO_PG3_M1PWM1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_M1PWM2; break; // port A, pin 6
		case 0x44: cfg = GPIO_PE4_M1PWM2; break; // port E, pin 4
		case 0x64: cfg = GPIO_PG4_M1PWM2; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_M1PWM3; break; // port A, pin 7
		case 0x45: cfg = GPIO_PE5_M1PWM3; break; // port E, pin 5
		case 0x65: cfg = GPIO_PG5_M1PWM3; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_M0FAULT1; break; // port D, pin 7
		case 0x62: cfg = GPIO_PG2_M0FAULT1; break; // port G, pin 2
		case 0x53: cfg = GPIO_PF3_M0FAULT1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_M0FAULT0; break; // port D, pin 2
		case 0x36: cfg = GPIO_PD6_M0FAULT0; break; // port D, pin 6
		case 0x52: cfg = GPIO_PF2_M0FAULT0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_PHA1; break; // port C, pin 5
		case 0x60: cfg = GPIO_PG0_PHA1; break; // port G, pin 0
		case 0x63: cfg = GPIO_PG3_PHA1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHA0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_PHA0; break; // port D, pin 6
		case 0x50: cfg = GPIO_PF0_PHA0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_PHB0; break; // port D, pin 7
		case 0x51: cfg = GPIO_PF1_PHB0; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsPHB1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_PHB1; break; // port C, pin 6
		case 0x61: cfg = GPIO_PG1_PHB1; break; // port G, pin 1
		case 0x64: cfg = GPIO_PG4_PHB1; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM0FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_M0FAULT2; break; // port G, pin 3
		case 0x54: cfg = GPIO_PF4_M0FAULT2; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_M1FAULT2; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_M1FAULT0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1FAULT1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_M1FAULT1; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsM1PWM5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_M1PWM5; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_CAN1RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1H16
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S9781
void GPIOPin::mapAsI2S0RXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2S0RXSCK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_I2S0RXMCLK; break; // port A, pin 3
		case 0x35: cfg = GPIO_PD5_I2S0RXMCLK; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S13() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x60: cfg = GPIO_PG0_EPI0S13; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S12() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x54: cfg = GPIO_PF4_EPI0S12; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S11() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_EPI0S11; break; // port H, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S10() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_EPI0S10; break; // port H, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S17() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x91: cfg = GPIO_PJ1_EPI0S17; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S19() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x93: cfg = GPIO_PJ3_EPI0S19; break; // port J, pin 3
		case 0x34: cfg = GPIO_PD4_EPI0S19; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S15() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x55: cfg = GPIO_PF5_EPI0S15; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S14() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x61: cfg = GPIO_PG1_EPI0S14; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		case 0x35: cfg = GPIO_PD5_U2RX; break; // port D, pin 5
		case 0x60: cfg = GPIO_PG0_U2RX; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_SSI1RX; break; // port H, pin 6
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		case 0x54: cfg = GPIO_PF4_SSI1RX; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_U1CTS; break; // port A, pin 6
		case 0x93: cfg = GPIO_PJ3_U1CTS; break; // port J, pin 3
		case 0x46: cfg = GPIO_PE6_U1CTS; break; // port E, pin 6
		case 0x30: cfg = GPIO_PD0_U1CTS; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U1RI; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S16() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x90: cfg = GPIO_PJ0_EPI0S16; break; // port J, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC2O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_C2O; break; // port C, pin 6
		case 0x47: cfg = GPIO_PE7_C2O; break; // port E, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DTR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x97: cfg = GPIO_PJ7_U1DTR; break; // port J, pin 7
		case 0x37: cfg = GPIO_PD7_U1DTR; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_CAN2TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2S0TXSD; break; // port E, pin 5
		case 0x50: cfg = GPIO_PF0_I2S0TXSD; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x91: cfg = GPIO_PJ1_I2C1SDA; break; // port J, pin 1
		case 0x61: cfg = GPIO_PG1_I2C1SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_CAN1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		case 0x36: cfg = GPIO_PD6_U2TX; break; // port D, pin 6
		case 0x61: cfg = GPIO_PG1_U2TX; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DCD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_U1DCD; break; // port A, pin 7
		case 0x94: cfg = GPIO_PJ4_U1DCD; break; // port J, pin 4
		case 0x47: cfg = GPIO_PE7_U1DCD; break; // port E, pin 7
		case 0x31: cfg = GPIO_PD1_U1DCD; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXMCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_I2S0TXMCLK; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x75: cfg = GPIO_PH5_SSI1FSS; break; // port H, pin 5
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXSD() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_I2S0RXSD; break; // port A, pin 2
		case 0x34: cfg = GPIO_PD4_I2S0RXSD; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_SSI1TX; break; // port H, pin 7
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		case 0x55: cfg = GPIO_PF5_SSI1TX; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S31() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x67: cfg = GPIO_PG7_EPI0S31; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S30() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_EPI0S30; break; // port J, pin 6
		case 0x37: cfg = GPIO_PD7_EPI0S30; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S18() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x92: cfg = GPIO_PJ2_EPI0S18; break; // port J, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_EPI0S3; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_EPI0S2; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_EPI0S1; break; // port H, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x73: cfg = GPIO_PH3_EPI0S0; break; // port H, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_EPI0S7; break; // port H, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_EPI0S6; break; // port H, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_EPI0S5; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_EPI0S4; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S9() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_EPI0S9; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S8() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_EPI0S8; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S22() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_EPI0S22; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S23() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_EPI0S23; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S20() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_EPI0S20; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S21() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_EPI0S21; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S26() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x76: cfg = GPIO_PH6_EPI0S26; break; // port H, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S27() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x77: cfg = GPIO_PH7_EPI0S27; break; // port H, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S24() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_EPI0S24; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S25() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_EPI0S25; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S28() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x94: cfg = GPIO_PJ4_EPI0S28; break; // port J, pin 4
		case 0x35: cfg = GPIO_PD5_EPI0S28; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsEPI0S29() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_EPI0S29; break; // port J, pin 5
		case 0x36: cfg = GPIO_PD6_EPI0S29; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_CAN0TX; break; // port A, pin 5
		case 0x07: cfg = GPIO_PA7_CAN0TX; break; // port A, pin 7
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_CAN0TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1DSR() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x95: cfg = GPIO_PJ5_U1DSR; break; // port J, pin 5
		case 0x50: cfg = GPIO_PF0_U1DSR; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x74: cfg = GPIO_PH4_SSI1CLK; break; // port H, pin 4
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0EPEN() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_USB0EPEN; break; // port A, pin 6
		case 0x73: cfg = GPIO_PH3_USB0EPEN; break; // port H, pin 3
		case 0x25: cfg = GPIO_PC5_USB0EPEN; break; // port C, pin 5
		case 0x12: cfg = GPIO_PB2_USB0EPEN; break; // port B, pin 2
		case 0x60: cfg = GPIO_PG0_USB0EPEN; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x70: cfg = GPIO_PH0_CCP6; break; // port H, pin 0
		case 0x93: cfg = GPIO_PJ3_CCP6; break; // port J, pin 3
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x71: cfg = GPIO_PH1_CCP7; break; // port H, pin 1
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x94: cfg = GPIO_PJ4_CCP4; break; // port J, pin 4
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		case 0x35: cfg = GPIO_PD5_CCP4; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x45: cfg = GPIO_PE5_CCP5; break; // port E, pin 5
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		case 0x67: cfg = GPIO_PG7_CCP5; break; // port G, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		case 0x35: cfg = GPIO_PD5_CCP2; break; // port D, pin 5
		case 0x55: cfg = GPIO_PF5_CCP2; break; // port F, pin 5
		case 0x95: cfg = GPIO_PJ5_CCP2; break; // port J, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		case 0x34: cfg = GPIO_PD4_CCP3; break; // port D, pin 4
		case 0x51: cfg = GPIO_PF1_CCP3; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		case 0x34: cfg = GPIO_PD4_CCP0; break; // port D, pin 4
		case 0x92: cfg = GPIO_PJ2_CCP0; break; // port J, pin 2
		case 0x97: cfg = GPIO_PJ7_CCP0; break; // port J, pin 7
		case 0x54: cfg = GPIO_PF4_CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		case 0x37: cfg = GPIO_PD7_CCP1; break; // port D, pin 7
		case 0x96: cfg = GPIO_PJ6_CCP1; break; // port J, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		case 0x37: cfg = GPIO_PD7_C0O; break; // port D, pin 7
		case 0x54: cfg = GPIO_PF4_C0O; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x90: cfg = GPIO_PJ0_I2C1SCL; break; // port J, pin 0
		case 0x60: cfg = GPIO_PG0_I2C1SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_I2S0TXWS; break; // port A, pin 5
		case 0x44: cfg = GPIO_PE4_I2S0TXWS; break; // port E, pin 4
		case 0x37: cfg = GPIO_PD7_I2S0TXWS; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_LED1; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsLED0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_LED0; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_CAN0RX; break; // port A, pin 4
		case 0x06: cfg = GPIO_PA6_CAN0RX; break; // port A, pin 6
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_CAN0RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0RXWS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2S0RXWS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_CAN2RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2S0TXSCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_I2S0TXSCK; break; // port A, pin 4
		case 0x16: cfg = GPIO_PB6_I2S0TXSCK; break; // port B, pin 6
		case 0x36: cfg = GPIO_PD6_I2S0TXSCK; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x96: cfg = GPIO_PJ6_U1RTS; break; // port J, pin 6
		case 0x51: cfg = GPIO_PF1_U1RTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x72: cfg = GPIO_PH2_C1O; break; // port H, pin 2
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		case 0x46: cfg = GPIO_PE6_C1O; break; // port E, pin 6
		case 0x55: cfg = GPIO_PF5_C1O; break; // port F, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsUSB0PFLT() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_USB0PFLT; break; // port A, pin 7
		case 0x26: cfg = GPIO_PC6_USB0PFLT; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_USB0PFLT; break; // port C, pin 7
		case 0x13: cfg = GPIO_PB3_USB0PFLT; break; // port B, pin 3
		case 0x40: cfg = GPIO_PE0_USB0PFLT; break; // port E, pin 0
		case 0x74: cfg = GPIO_PH4_USB0PFLT; break; // port H, pin 4
		case 0x91: cfg = GPIO_PJ1_USB0PFLT; break; // port J, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_CAN1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM4F111C4QR
void GPIOPin::mapAsI2C3SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_I2C3SDA; break; // port D, pin 1
		case 0x61: cfg = GPIO_PG1_I2C3SDA; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x53: cfg = GPIO_PF3_TRCLK; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_U2RX; break; // port D, pin 6
		case 0x64: cfg = GPIO_PG4_U2RX; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI1RX; break; // port D, pin 2
		case 0x50: cfg = GPIO_PF0_SSI1RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1CTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1CTS; break; // port C, pin 5
		case 0x51: cfg = GPIO_PF1_U1CTS; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_U6TX; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RX; break; // port C, pin 4
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_U7TX; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_U3RX; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_I2C2SDA; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x62: cfg = GPIO_PG2_I2C4SCL; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_T3CCP1; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_T3CCP0; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		case 0x65: cfg = GPIO_PG5_I2C1SDA; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_WT5CCP1; break; // port D, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x36: cfg = GPIO_PD6_WT5CCP0; break; // port D, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_U2TX; break; // port D, pin 7
		case 0x65: cfg = GPIO_PG5_U2TX; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU6RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_U6RX; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI3FSS; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_U3TX; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x34: cfg = GPIO_PD4_WT4CCP0; break; // port D, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x35: cfg = GPIO_PD5_WT4CCP1; break; // port D, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI3TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_T0CCP0; break; // port B, pin 6
		case 0x50: cfg = GPIO_PF0_T0CCP0; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI3CLK; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_WT0CCP0; break; // port C, pin 4
		case 0x64: cfg = GPIO_PG4_WT0CCP0; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_SSI1FSS; break; // port D, pin 1
		case 0x53: cfg = GPIO_PF3_SSI1FSS; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_T4CCP0; break; // port C, pin 0
		case 0x60: cfg = GPIO_PG0_T4CCP0; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT4CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_T4CCP1; break; // port C, pin 1
		case 0x61: cfg = GPIO_PG1_T4CCP1; break; // port G, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_T1CCP1; break; // port B, pin 5
		case 0x53: cfg = GPIO_PF3_T1CCP1; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_T1CCP0; break; // port B, pin 4
		case 0x52: cfg = GPIO_PF2_T1CCP0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_SSI1TX; break; // port D, pin 3
		case 0x51: cfg = GPIO_PF1_SSI1TX; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C4SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x63: cfg = GPIO_PG3_I2C4SDA; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C2SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_I2C2SCL; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x45: cfg = GPIO_PE5_U5TX; break; // port E, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U4RX; break; // port C, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_SSI2CLK; break; // port B, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_SSI2RX; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x33: cfg = GPIO_PD3_WT3CCP1; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C3SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_I2C3SCL; break; // port D, pin 0
		case 0x60: cfg = GPIO_PG0_I2C3SCL; break; // port G, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CAN0TX; break; // port B, pin 5
		case 0x45: cfg = GPIO_PE5_CAN0TX; break; // port E, pin 5
		case 0x53: cfg = GPIO_PF3_CAN0TX; break; // port F, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_SSI1CLK; break; // port D, pin 0
		case 0x52: cfg = GPIO_PF2_SSI1CLK; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x27: cfg = GPIO_PC7_WT1CCP1; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT1CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_WT1CCP0; break; // port C, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI3RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_SSI3RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x37: cfg = GPIO_PD7_NMI; break; // port D, pin 7
		case 0x50: cfg = GPIO_PF0_NMI; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU7RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_U7RX; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU4TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U4TX; break; // port C, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x10: cfg = GPIO_PB0_T2CCP0; break; // port B, pin 0
		case 0x54: cfg = GPIO_PF4_T2CCP0; break; // port F, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x11: cfg = GPIO_PB1_T2CCP1; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_T5CCP1; break; // port C, pin 3
		case 0x63: cfg = GPIO_PG3_T5CCP1; break; // port G, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT5CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_T5CCP0; break; // port C, pin 2
		case 0x62: cfg = GPIO_PG2_T5CCP0; break; // port G, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_U1TX; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_C0O; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		case 0x64: cfg = GPIO_PG4_I2C1SCL; break; // port G, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_I2C5SDA; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU5RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U5RX; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x30: cfg = GPIO_PD0_WT2CCP0; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT2CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x31: cfg = GPIO_PD1_WT2CCP1; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_T0CCP1; break; // port B, pin 7
		case 0x51: cfg = GPIO_PF1_T0CCP1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCAN0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_CAN0RX; break; // port B, pin 4
		case 0x44: cfg = GPIO_PE4_CAN0RX; break; // port E, pin 4
		case 0x50: cfg = GPIO_PF0_CAN0RX; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT0CCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_WT0CCP1; break; // port C, pin 5
		case 0x65: cfg = GPIO_PG5_WT0CCP1; break; // port G, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_SSI2FSS; break; // port B, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x50: cfg = GPIO_PF0_TRD2; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsWT3CCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x32: cfg = GPIO_PD2_WT3CCP0; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x52: cfg = GPIO_PF2_TRD0; break; // port F, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTRD1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_TRD1; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RTS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_U1RTS; break; // port C, pin 4
		case 0x50: cfg = GPIO_PF0_U1RTS; break; // port F, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x51: cfg = GPIO_PF1_C1O; break; // port F, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C5SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_I2C5SCL; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_SSI2TX; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
#ifdef PART_LM3S1C26
void GPIOPin::mapAsU2RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x14: cfg = GPIO_PB4_U2RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U2RX; break; // port D, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU2TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x44: cfg = GPIO_PE4_U2TX; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_U2TX; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_SWO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTMS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_TMS; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x42: cfg = GPIO_PE2_SSI1RX; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x04: cfg = GPIO_PA4_SSI0RX; break; // port A, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP6() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x15: cfg = GPIO_PB5_CCP6; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP6; break; // port E, pin 1
		case 0x30: cfg = GPIO_PD0_CCP6; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_CCP6; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP7() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x16: cfg = GPIO_PB6_CCP7; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP7; break; // port E, pin 3
		case 0x31: cfg = GPIO_PD1_CCP7; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_CCP7; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP4() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP4; break; // port A, pin 7
		case 0x24: cfg = GPIO_PC4_CCP4; break; // port C, pin 4
		case 0x27: cfg = GPIO_PC7_CCP4; break; // port C, pin 7
		case 0x42: cfg = GPIO_PE2_CCP4; break; // port E, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP5() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP5; break; // port C, pin 4
		case 0x15: cfg = GPIO_PB5_CCP5; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_CCP5; break; // port B, pin 6
		case 0x32: cfg = GPIO_PD2_CCP5; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP2() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x24: cfg = GPIO_PC4_CCP2; break; // port C, pin 4
		case 0x11: cfg = GPIO_PB1_CCP2; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_CCP2; break; // port B, pin 5
		case 0x41: cfg = GPIO_PE1_CCP2; break; // port E, pin 1
		case 0x42: cfg = GPIO_PE2_CCP2; break; // port E, pin 2
		case 0x44: cfg = GPIO_PE4_CCP2; break; // port E, pin 4
		case 0x31: cfg = GPIO_PD1_CCP2; break; // port D, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP3() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x07: cfg = GPIO_PA7_CCP3; break; // port A, pin 7
		case 0x25: cfg = GPIO_PC5_CCP3; break; // port C, pin 5
		case 0x26: cfg = GPIO_PC6_CCP3; break; // port C, pin 6
		case 0x12: cfg = GPIO_PB2_CCP3; break; // port B, pin 2
		case 0x40: cfg = GPIO_PE0_CCP3; break; // port E, pin 0
		case 0x44: cfg = GPIO_PE4_CCP3; break; // port E, pin 4
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP0() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x26: cfg = GPIO_PC6_CCP0; break; // port C, pin 6
		case 0x27: cfg = GPIO_PC7_CCP0; break; // port C, pin 7
		case 0x10: cfg = GPIO_PB0_CCP0; break; // port B, pin 0
		case 0x12: cfg = GPIO_PB2_CCP0; break; // port B, pin 2
		case 0x15: cfg = GPIO_PB5_CCP0; break; // port B, pin 5
		case 0x33: cfg = GPIO_PD3_CCP0; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsCCP1() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x06: cfg = GPIO_PA6_CCP1; break; // port A, pin 6
		case 0x24: cfg = GPIO_PC4_CCP1; break; // port C, pin 4
		case 0x25: cfg = GPIO_PC5_CCP1; break; // port C, pin 5
		case 0x11: cfg = GPIO_PB1_CCP1; break; // port B, pin 1
		case 0x16: cfg = GPIO_PB6_CCP1; break; // port B, pin 6
		case 0x43: cfg = GPIO_PE3_CCP1; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U0RX; break; // port A, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWDIO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x21: cfg = GPIO_PC1_SWDIO; break; // port C, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x02: cfg = GPIO_PA2_SSI0CLK; break; // port A, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U1TX; break; // port A, pin 1
		case 0x27: cfg = GPIO_PC7_U1TX; break; // port C, pin 7
		case 0x11: cfg = GPIO_PB1_U1TX; break; // port B, pin 1
		case 0x15: cfg = GPIO_PB5_U1TX; break; // port B, pin 5
		case 0x31: cfg = GPIO_PD1_U1TX; break; // port D, pin 1
		case 0x33: cfg = GPIO_PD3_U1TX; break; // port D, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC0O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C0O; break; // port C, pin 5
		case 0x15: cfg = GPIO_PB5_C0O; break; // port B, pin 5
		case 0x16: cfg = GPIO_PB6_C0O; break; // port B, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_I2C1SCL; break; // port A, pin 0
		case 0x06: cfg = GPIO_PA6_I2C1SCL; break; // port A, pin 6
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU1RX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x00: cfg = GPIO_PA0_U1RX; break; // port A, pin 0
		case 0x26: cfg = GPIO_PC6_U1RX; break; // port C, pin 6
		case 0x10: cfg = GPIO_PB0_U1RX; break; // port B, pin 0
		case 0x14: cfg = GPIO_PB4_U1RX; break; // port B, pin 4
		case 0x30: cfg = GPIO_PD0_U1RX; break; // port D, pin 0
		case 0x32: cfg = GPIO_PD2_U1RX; break; // port D, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTCK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_TCK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsU0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_U0TX; break; // port A, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x13: cfg = GPIO_PB3_I2C0SDA; break; // port B, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x05: cfg = GPIO_PA5_SSI0TX; break; // port A, pin 5
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSWCLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x20: cfg = GPIO_PC0_SWCLK; break; // port C, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x22: cfg = GPIO_PC2_TDI; break; // port C, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x41: cfg = GPIO_PE1_SSI1FSS; break; // port E, pin 1
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsC1O() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x25: cfg = GPIO_PC5_C1O; break; // port C, pin 5
		case 0x27: cfg = GPIO_PC7_C1O; break; // port C, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1CLK() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x40: cfg = GPIO_PE0_SSI1CLK; break; // port E, pin 0
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C1SDA() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x01: cfg = GPIO_PA1_I2C1SDA; break; // port A, pin 1
		case 0x07: cfg = GPIO_PA7_I2C1SDA; break; // port A, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsTDO() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x23: cfg = GPIO_PC3_TDO; break; // port C, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI1TX() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x43: cfg = GPIO_PE3_SSI1TX; break; // port E, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsSSI0FSS() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x03: cfg = GPIO_PA3_SSI0FSS; break; // port A, pin 3
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsI2C0SCL() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x12: cfg = GPIO_PB2_I2C0SCL; break; // port B, pin 2
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

void GPIOPin::mapAsNMI() {
	uint32_t cfg;
	switch (_port_pin) {
		case 0x17: cfg = GPIO_PB7_NMI; break; // port B, pin 7
		default: while(1);
	}
	MAP_GPIOPinConfigure(cfg);
}

#endif
